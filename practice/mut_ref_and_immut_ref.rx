/// 可变租借和不可变租借不能同时存在。
// 1 |#![allow(unused)]
// 2 |fn main() {
// 3 |    let mut list = vec![1, 2, 3, 4, 5];
// 4 |    //
// 5 |    let a = &list;
// 6 |    // let b = &mut list;
// 7 |    // println!("{:?},{:?}",a,b);
// 8 |
// 9 |    let c = &list;
//10 |    println!("{:?},{:?}",a,c); 
//11 |    let d = &mut list;
//12 |    println!("{:?}",d); 
//13 |}

/*
    在不可变借用的生命周期（最小作用域内），禁止出现用可变借用。例如： line 5-line 7之间，禁止出现&mut list，可以出现 line 5-line 9
    在可变借用的生命周期，同样禁止出现不可变借用。
    分析： 不可变借用和可变借用都是borrow，有借用需要返回，从借用-返还数据的所有权期间，原始数据会被冻结，此时只允许不可变借用。 
    例如： line 5 - line 10 期间 list被冻结，禁止出现lie 6 的不可变借用&mut list。然而 line 5 - line 10 期间，line 5 和line 9 可以同时使用&list不可变借用。
    同一作用域，可以同时出现不变借用，即可以同时读。
    同一作用域，不能同时出现不可变借用，即不可以同时写。
*/

//   |     error[E0502]: cannot borrow `list` as immutable because it is also borrowed as mutable
//   |
// 6 |     let b =&mut list;
//   |            --------- mutable borrow occurs here
// 7 |     let a = &list;
//   |             ^^^^^ immutable borrow occurs here
// 8 |     
// 9 |     println!("{:?},{:?}",a,b);
//   |                            - mutable borrow later used here



=============================================================================================================
/// 同上一样出现了可变和不可变引用同时发生
#![allow(unused)]
fn main() {
    let mut list = vec![1, 2, 3, 4, 5];
    
    list [list.len()-1]= 0;
    
    println!("{:?},{:?}",list,0);

}
//   |    error[E0502]: cannot borrow `list` as immutable because it is also borrowed as mutable
//   |
//   |     list [list.len()-1]= 0;
// 5 |     ------^^^^---------
//   |     |     |
//   |     |     immutable borrow occurs here
//   |     mutable borrow occurs here
//   |     mutable borrow later used here


=============================================================================================================
/// 不可变租借和原始对象之间的冻结问题。
/// 两者可以同时存在，但是不能修改原始对象数据，除非不可变租借离开了作用域。
fn main(){
    let mut mutable_integer = 7i32;
    // {
    //     let borrow = &mutable_integer;
    //     mutable_integer += 1;
    //     println!("{}",borrow);
    // }
    // println!("{}",mutable_integer);
    
    // 变量在借用的过程中，不能被修改。cannot assign to `mutable_integer` because it is borrowed.
    // 也叫冻结(freeze),已冻结的数据无法通过原始对象来修改，直到这些数据的所有引用离开作用域。
    let borrow = &mutable_integer;
//               ---------------- borrow of `mutable_integer` occurs here
    mutable_integer +=1;
//  ^^^^^^^^^^^^^^^^^^^ assignment to borrowed `mutable_integer` occurs here
    println!("{},{}",mutable_integer,borrow);
//                                   ------ borrow later used here
}
